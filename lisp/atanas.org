#+Title: Additional Config
#+Author: Atanas Janackovski
#+Date: 2020
This is my config for additional packages and thier associated settings. Some of this is taken from other packages, and I will cite them as appropriate.

* Keybindings
These are keybindings related to built-in features that are not enabled by default.
** DONE Org-mode
CLOSED: [2020-01-18 Sat 23:48]
A global binding for Org-mode. This has been added to the Org Mode in the =.config.org.=
Org-mode supports [[http://orgmode.org/manual/Hyperlinks.html#Hyperlinks][links]], this command allows you to store links.
globally for later insertion into an Org-mode buffer.
See [[http://orgmode.org/manual/Handling-links.html#Handling-links][Handling-links]] in the Org-mode manual.
#+begin_src emacs-lisp :tangle no
  (use-package org
    :init
    (define-key map-global ("\C-c l") 'org-store-link)
    (define-key map-global ("\C-c a") 'org-agenda)
    (define-key map-global ("\C-c c") 'org-capture)
    (setq org-log-done 'time
          org-agenda-files (list "/Users/atanas/Dropbox/Apps/org/work.org"
                                 "/Users/atanas/Dropbox/Apps/org/home.org"
                                 "/Users/atanas/Dropbox/Apps/org/school.org"
                                 "/Users/atanas/Dropbox/Apps/org/OrgTutorial.org"
                                 ))
    )
#+end_src


#+source: org-setup
#+begin_src emacs-lisp :tangle no
    (use-package org
    :ensure t
    :mode ("\\.org\\'" . org-mode)
    :bind (("C-c l" . org-store-link)
           ("C-c c" . org-capture)
           ("C-c a" . org-agenda)
           ("C-c b" . org-iswitchb)
           ("C-c C-w" . org-refile)
           ("C-c j" . org-clock-goto)
           ("C-c C-x C-o" . org-clock-out))
    :config
    (progn
      ;; The GTD part of this config is heavily inspired by
      ;; https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html
      (setq org-directory "~/org")
      (setq org-agenda-files
            (mapcar (lambda (path) (concat org-directory path))
                    '("/org.org"
                      "/gtd/gtd.org"
                      "/gtd/inbox.org"
                      "/gtd/tickler.org")))
      (setq org-log-done 'time)
      (setq org-src-fontify-natively t)
      (setq org-use-speed-commands t)
      (setq org-capture-templates
            '(("t" "Todo [inbox]" entry
               (file+headline "~/org/gtd/inbox.org" "Tasks")
               "* TODO %i%?")
              ("T" "Tickler" entry
               (file+headline "~/org/gtd/tickler.org" "Tickler")
               "* %i%? \n %^t")))
      (setq org-refile-targets
            '(("~/org/gtd/gtd.org" :maxlevel . 3)
              ("~/org/gtd/someday.org" :level . 1)
              ("~/org/gtd/tickler.org" :maxlevel . 2)))
      (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))
      (setq org-agenda-custom-commands
            '(("@" "Contexts"
               ((tags-todo "@email"
                           ((org-agenda-overriding-header "Emails")))
                (tags-todo "@phone"
                           ((org-agenda-overriding-header "Phone")))))))
      (setq org-clock-persist t)
      (org-clock-persistence-insinuate)
      (setq org-time-clocksum-format '(:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t)))
    )

  (use-package org-inlinetask
    :bind (:map org-mode-map
                ("C-c C-x t" . org-inlinetask-insert-task))
    :after (org)
    :commands (org-inlinetask-insert-task)
    )

  (use-package org-bullets
    :ensure t
    :commands (org-bullets-mode)
    :init (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    )

#+end_src

#+RESULTS: org-setup
| (lambda nil (org-bullets-mode 1)) | org-clock-load | pandoc-mode | org-bullets-mode | org-indent-mode | visual-line-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-block-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

* Settings without corresponding packages
** CANCELED max-specpdl-size 50000
CLOSED: [2020-01-23 Thu 01:58]

#+source: max-spec
#+begin_src emacs-lisp

#+end_src


** Cleanup-Buffers
This is not currently used. If needed, tangle them.

#+source: cleanup-buffer-on-save
#+begin_src emacs-lisp :tangle no
  ;; Credit: Alex Ott
  (defun cleanup-buffer-hook ()
    "A hook for cleanup-buffer. cleanup-buffer-modes should be a list
    of modes you want the cleanup-buffer function applied to routinely. "
    (when (member major-mode cleanup-buffer-modes)
      (cleanup-buffer)))
  ;; now files int he modes listed in cleanup-buffer-mode will be
  ;; automatically cleaned every time they are saved.
  (add-hook 'before-save-hook 'cleanup-buffer-hook)

#+end_src

#+source: cleanup-buffer-when
#+begin_src emacs-lisp :tangle no
  (setq cleanup-buffer-modes
        '(haskell-mode emacs-lisp-mode lisp-mode scheme-mode
                       ess-mode erlang-mode clojure-mode ruby-mode))

#+end_src

** openwith

#+BEGIN_SRC emacs-lisp
  (use-package openwith
    :demand
    :init
    :config
    (openwith-mode t)
    (setq openwith-associations
          (list
           (list (openwith-make-extension-regexp
                  '("pdf" "html" "svg" "doc" "docx" "xls" "xlsx" "ppt" "pptx" "pptm" "pzfx"))
                 "open"
                 '(file))
           ))
    )

#+END_SRC

* Third-party packages
** Yasnippet NOT USED
Yasnippet is a snippet expansion system for Emacs. It uses short phrases and the tab key to trigger the insertion of frequently-used snippets of code or text in your document.

*** Load the yasnippet bundle
#+begin_src emacs-lisp :tangle no
  ;; (add-to-list 'load-path
  ;;                  (expand-file-name  "yasnippet"
  ;;                                     (expand-file-name "elpa"
  ;;                                                       dotfiles-dir)))
  (use-package yasnippet
  ;;  (yas-set-ac-modes)
  ;;  (yas-enable-emacs-lisp-paren-hack)
    :config (yas-global-mode 1))
#+end_src

Load the snippets defined in the package's =./snippets/= directory, and local snippets from the =./local-snippets/= directory.

#+begin_src emacs-lisp :tangle no
  (yas-load-directory (expand-file-name "~/.emacs.d/snippets"))
#+end_src

#+begin_src emacs-lisp :tangle no
(defun check-expansion ()
    (save-excursion
      (if (looking-at "\\_>") t
        (backward-char 1)
        (if (looking-at "\\.") t
          (backward-char 1)
          (if (looking-at "->") t nil)))))

  (defun do-yas-expand ()
    (let ((yas-fallback-behavior 'return-nil))
      (yas-expand)))

  (defun tab-indent-or-complete ()
    (interactive)
    (if (minibufferp)
        (minibuffer-complete)
      (if (or (not yas-minor-mode)
              (null (do-yas-expand)))
          (if (check-expansion)
              (company-complete-common)
            (indent-for-tab-command)))))

  (global-set-key [tab] 'tab-indent-or-complete)
#+end_src
** ESS, R, ploy-R and poly-markdown
This is taken mostly from the kjhealy and the spacemacs config. May need to go out to a separate lisp at some time if navigation proves too unwieldy.
*** Add Golden Ratio
#+source: golden-ratio
#+begin_src emacs-lisp :tangle yes
  (use-package use-package-chords
    :config (key-chord-mode 1))

  (use-package golden-ratio
    :bind ("C-c C-g" . golden-ratio-mode)
    :config
    (setq golden-ratio-auto-scale t) ; use instead of the adjust factors
    ;; (setq golden-ratio-adjust-factor .8
    ;;       golden-ratio-wide-adjust-factor .8)
    (setq golden-ratio-extra-commands
          (append golden-ratio-extra-commands
                  '(ace-window
                    ess-eval-buffer-and-go
                    ess-eval-function-and-go
                    ess-eval-line-and-go
                    )))
    )

#+end_src

*** Make shift-enter do a lot in ESS.
 Use shift-enter to split window & launch R (if not running), execute
 highlighted region (if R running & area highlighted), or execute
 current line (and move to next line, skipping comments). Nice. See
 http://www.emacswiki.org/emacs/EmacsSpeaksStatistics,
 FelipeCsaszar. Adapted to split vertically instead of horizontally.
#+src-name: ess-shift-enter
#+begin_src emacs-lisp
  (setq ess-ask-for-ess-directory t
        ess-local-process-name "R"
        ansi-color-for-comint-mode 'filter
        comint-scroll-to-bottom-on-input t
        comint-scroll-to-bottom-on-output t
        comint-move-point-for-output t)

  (defun my-ess-start-R ()
    (interactive)
    (unless (mapcar (lambda (s) (string-match "*R" (buffer-name s))) (buffer-list))
      ;; (unless (string-match "*R" (mapcar (function buffer-name) (buffer-list)))
      (progn
        (delete-other-windows)
        (setq w1 (selected-window))
        (setq w1name (buffer-name))
        (setq w2 (split-window w1 nil t))
        (R)
        (set-window-buffer w2 "*R*")
        (set-window-buffer w1 w1name))))

  (defun my-ess-eval ()
    (interactive)
    (my-ess-start-R)
    (if (and transient-mark-mode mark-active)
        (call-interactively 'ess-eval-region)
      (call-interactively 'ess-eval-line-and-step)))
#+end_src
*** Load ESS
This is hacked together form the ess-r-mode for spacemacs.
From kjhealy:
"[[https://github.com/jimhester/lintr][lintr]] checks your R code for style and syntax errors. It's an R library that integrates with [[http://www.flycheck.org][flycheck]]. You must install lintr from R. Flycheck can also check code in many other languages. You will need to install linters for them separately as well. See the flycheck documentation for details."

#+src-name: ess-mode
#+begin_src emacs-lisp
  ;; =========================================================
  ;; This solution is working
  ;; ========================================================

  ;; enable flycheck
  ;; (add-hook 'after-init-hook #'global-flycheck-mode) ; already enabled in config.org

  ;; setup ess for r-modes
  ;; not convinced need all this, as had simpler config  and same behaviour
  (use-package ess
    :mode (
           ("/R/.*\\.q\\'"       . R-mode)
           ("\\.[rR]\\'"         . R-mode)
           ("\\.[rR]profile\\'"  . R-mode)
           ("NAMESPACE\\'"       . R-mode)
           ("CITATION\\'"        . R-mode)
           ("\\.[Rr]out"         . R-transcript-mode)
           ("\\.Rd\\'"           . Rd-mode)
           )
    :interpreter (
                  ("R" . R-mode)
                  ("R" . R-transcript-mode)
                  ("R" . Rd-mode)
                  )
    :config
    ;; (require 'ess-r-mode)
    (use-package ess-r-mode
      :load-path "elpa/ess/")
    (setq ess-first-continued-statement-offset 2
          ess-continued-statement-offset 0
          ess-expression-offset 2
          ess-nuke-trailing-whitespace-p t
          ess-default-style 'DEFAULT)
    ;; auto-width
    (setq ess-auto-width 'window)
    ;; Toggle underscore off no replacement of _ for <-
    (setq ess-smart-S-assign-key nil)
    ;; Stop R repl eval from blocking emacs.
    (setq ess-eval-visibly 'nowait)
    (defun tide-insert-assign ()
      "Insert an assignment <-"
      (interactive)
      (insert " <- "))
    (defun tide-insert-pipe ()
      "Insert a %>% and newline"
      (interactive)
      (insert " %>%"))
    (defun tide-insert-assign ()
      "Insert an assignment <-"
      (interactive)
      (insert "<- "))
    ;; set keybindings
    ;; insert pipe
    (define-key ess-r-mode-map (kbd "C-\"") 'tide-insert-pipe)
    (define-key inferior-ess-r-mode-map (kbd "C-\"") 'tide-insert-pipe)
    ;; insert assign
    (define-key ess-r-mode-map (kbd "C-'") 'tide-insert-assign)
    (define-key inferior-ess-r-mode-map (kbd "C-'") 'tide-insert-assign)
    :hook
    ;; enable lintr
    (ess-mode . (lambda ()
                  (flycheck-mode t)))
    ;; ess-shift-enter to execute code
    (ess-mode . (lambda()
                  (local-set-key [(shift return)] 'my-ess-eval)))
    (inferior-ess-mode . (lambda()
                           (local-set-key [C-up] 'comint-previous-input)
                           (local-set-key [C-down] 'comint-next-input)))
    (Rnw-mode . (lambda()
                  (local-set-key [(shift return)] 'my-ess-eval)))
    (ess-mode . company-mode)
    (inferior-ess-mode . company-mode)
    )


    ;; below disabled but left here, golden-ratio seems to interfere with company
    ;; have set kbd for to enable company mode as "<f12>""
    ;; (ess-mode . company-mode)
    ;; (ess-r-mode . company-mode)

#+end_src
**** ess-R-data-view
#+source: ess-R-data-view
#+begin_src emacs-lisp :tangle no
  ;; will use ess-data-view, as easier to use external
  (use-package ess-R-data-view)
#+end_src
*** Use Knitr to process Sweave documents
#+source: knitr-swv
#+begin_src emacs-lisp :tangle yes
    (setq ess-swv-processor "'knitr"
          ess-swv-pdflatex-commands '("pdflatex" "make" "texi2pdf")) ; added from spacemacs config
#+end_src

*** ess-view
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ess-view
    :ensure t
    :after ess
    :diminish
    :config
    (setq ess-view--spreadsheet-program "open")
    (setq ess-view-inspect-and-save-df t)
    ;; enable ess-view package to be triggered from the source doc
    ;; see: <https://github.com/GioBo/ess-view/issues/9>
    (defun ess-view-extract-R-process ()
      "Return the name of R running in current buffer."
      (let*
          ((proc (ess-get-process))         ; Modified from (proc (get-buffer-process (current-buffer)))
           (string-proc (prin1-to-string proc))
           (selected-proc (s-match "^#<process \\(R:?[0-9]*\\)>$" string-proc)))
        (nth 1 (-flatten selected-proc))
        )
      )
    )
#+END_SRC

*** Use Polymode
Polymode is a package that supports multiple modes inside a single buffer. It is aimed particularly at literate programming approaches and supports, e.g., R and markdown in a single =.Rmd= file. So it is very useful with knitr in R.
#+source: polymode
#+begin_src emacs-lisp :tangle yes
  ;; from spacemacs config
   (use-package polymode
    :mode (("\\.Rmd"   . Rmd-mode))
    :config
    (progn
      (defun Rmd-mode ()
        "ESS Markdown mode for Rmd files"
        (interactive)
        (use-package poly-R) ; was (require 'poly-R)
        (use-package poly-markdown)
        (R-mode)
        (poly-markdown+r-mode))
      ))
#+end_src
*** Add a Keyboard Shortcut for Rmd chunks

#+src-name: rmd-chunk-insert
#+BEGIN_SRC emacs-lisp
  ;; Insert new chunk for Rmarkdown
  (defun aj/r-insert-chunk (header)
    "Insert an r-chunk in markdown mode."
    (interactive "sLabel: ")
    (insert (concat "```{r " header "}\n\n```"))
    (forward-line -1))

  (global-set-key (kbd "\C-c i") 'aj/r-insert-chunk)
#+END_SRC

** Markdown, Pandoc and all things writing
These are where settings for pandoc and markdown related features.
**** Markdown and Marked2.app
Markdown mode support, including preview in =.Marked2.app.=.

#+srcname: markdown-mode
#+begin_src emacs-lisp
  (use-package markdown-mode
    :config
    (autoload 'markdown-mode "markdown-mode"
    "Major mode for editing Markdown files" t)
    (setq auto-mode-alist (cons '("\\.Markdown" . markdown-mode) auto-mode-alist))
    (setq auto-mode-alist (cons '("\\.MarkDown" . markdown-mode) auto-mode-alist))
    (setq auto-mode-alist (cons '("\\.markdown" . markdown-mode) auto-mode-alist))
    (setq auto-mode-alist (cons '("\\.md" . markdown-mode) auto-mode-alist))
    (setq auto-mode-alist (cons '("README\\.md" . gfm-mode) auto-mode-alist))
    :hook ((markdown-mode . visual-line-mode)
           (markdown-mode . display-line-numbers-mode)
           (markdown-mode . rainbow-delimiters-mode)
           (markdown-mode . hs-minor-mode)
           )
    ;; (add-hook 'markdown-mode-hook 'visual-line-mode)
    ;; (add-hook 'markdown-mode-hook 'latex-unicode-simplified)
    )

  ;; (global-visual-line-mode t)
  ;; This function will open Marked.app and monitor the current markdown document
  ;; for anything changes.  In other words, it will live reload and convert the
  ;; markdown documment
  (defun aj/markdown-preview-file ()
    "run Marked on the current file and revert the buffer"
   (interactive)
   (shell-command
   (format "open -a /Applications/Marked\\ 2.app %s" (shell-quote-argument (buffer-file-name)))))

  (global-set-key "\C-cm" 'aj/markdown-preview-file)

  (use-package yaml-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.ya?ml$" . yaml-mode))
    (add-to-list 'auto-mode-alist '("\\.rb$" . ruby-mode))
    (add-to-list 'auto-mode-alist '("Rakefile$" . ruby-mode)))
#+end_src

**** TODO Pandoc
Basic configuration as plan to use makefiles.
Will leave in case change mind.
#+source: pandoc
#+begin_src emacs-lisp :tangle yes
  (use-package pandoc-mode
    :demand
    :hook ((markdown-mode . pandoc-mode)
           (TeX-mode . pandoc-mode)
           (org-mode . pandoc-mode)
           (pandoc-mode . pandoc-load-default-settings))
    :bind
    ("C-c j" . pandoc-jump-to-reference)
    :config
    (setq pandoc-citation-jump-function 'pandoc-open-in-ebib))
#+end_src

***** Ebib
This needs to come before the "openwith" function below
#+source: manage-bib-files
#+begin_src emacs-lisp :tangle yes
  (use-package ebib
    :config
    (setq ebib-preload-bib-files '("/Users/atanas/.pandoc/MyLib.bib")
          ebib-lay-out 'full
          ebib-file-associations '(
                                   ;; open via openwith
                                   ("pdf" . "open")
                                   ("ps" . "gv")))
    :hook (ebib . golden-ratio-mode)
    )
#+end_src

***** PDF Tools

#+source: pdf-tools
#+begin_src emacs-lisp :tangle no
  ;; configured `openwith` instead, so do  not need this package.
  (use-package pdf-tools
    :config
    (add-hook 'doc-view-mode-hook 'pdf-tools-install))
#+end_src

***** Pandoc Word Count
The below works, however there is some bash error message.
#+source: pan_wc
#+begin_src emacs-lisp :tangle yes
  (defun aj/pwc ()
    (interactive) (shell-command (concat "pandoc --lua-filter wordcount.lua " buffer-file-name)))
  ;; this might be problematic, as really I only want this for markdown docs
  (global-set-key "\C-cw" 'aj/pwc)
#+end_src

***** DONE Writeroom-mode
CLOSED: [2020-01-20 Mon 09:26]
Need to configi
#+source: writeroom
#+begin_src emacs-lisp :tangle yes
  (use-package writeroom-mode
    :config
    (setq writeroom-fullscreen-effect 'maximized
          writeroom-extra-line-spacing 0.8)
    :bind (("C-c C-w C-r" . writeroom-mode)
           :map writeroom-mode-map
           ("C-M-<" . writeroom-decrease-width)
           ("C-M->" . writeroom-increase-width)
           ("C-M-=" . writeroom-adjust-width)
           )
    )
  ;; this is just put here for now, maybe a better place to put it
  (global-hl-line-mode 1)
#+end_src

**** TODO LATEX
***** AucTex
Ths is a series of packages, including the latexmk
https://www.gnu.org/software/auctex/
***** latexmk
latex specific makefile
See https://github.com/Sparsa/.emacs.d and https://www.reddit.com/r/emacs/comments/akmwko/the_best_latex_editor/
**** Spelling
#+source: spelling
#+begin_src emacs-lisp :tangle yes
  ;; can't remember where I found this one
  (defun my-flyspell-mode-hook ()
    ;; Do things when flyspell enters or leaves flyspell mode
    ;; Added manually
    ;;
    ;; Magic Mouse Fixes
    (if flyspell-mode (progn
                        (define-key flyspell-mouse-map [down-mouse-3] #'flyspell-correct-word)
                        (define-key flyspell-mouse-map [mouse-3] #'undefined))
      nil)
    ;; End my-flyspell-mode-hook
    )
  ;; solution from:
  ;; https://emacs.stackexchange.com/questions/9640/could-not-load-package-flyspell-with-use-package
  (use-package flyspell
    :init
    (progn
      (flyspell-mode 1))
    :config
    (progn
      (setq ispell-program-name "aspell")
      (setq ispell-list-command "--list") ;; run flyspell with aspell, not ispell
      )
    :hook ((flyspell-mode . my-flyspell-mode-hook)
           (text-mode . flyspell-mode)
           (prog-mode . flyspell-prog-mode))
    )

  ;; rapid mode entered by "C-u C-M-;", "C-u C-u" changes direction
  ;; rapid mode moves through the document
  (use-package flyspell-correct-ivy
    :bind ("C-M-;" . flyspell-correct-wrapper)
    :init
    (setq flyspell-correct-interface #'flyspell-correct-ivy))
#+end_src

***** grammar
#+BEGIN_SRC emacs-lisp
  ;; https://laclefyoshi.hatenablog.com/entry/20150912/langtool_popup
  ;; (defun aj/langtool-autoshow-detail-popup (overlays)
  ;;   (when (require 'pos-tip nil t)
  ;;     ;; Do not interrupt current popup
  ;;     (unless (or popup-instances
  ;;                 ;; suppress popup after type `C-g` .
  ;;                 (memq last-command '(keyboard-quit)))
  ;;       (let ((msg (langtool-details-error-message overlays)))
  ;;         (popup-tip msg)))))

  (use-package langtool
    :config
    (setq langtool-language-tool-jar "/usr/local/Cellar/languagetool/4.8/libexec/languagetool.jar"
          langtool-default-language "en-GB")
    )
    ;; (setq langtool-autoshow-message-function
    ;;       'aj/langtool-autoshow-detail-popup)

#+END_SRC

***** Writegood
Description from [[http://matt.might.net/articles/shell-scripts-for-passive-voice-weasel-words-duplicates/][here]]: FSF
Weasel words--phrases or words that sound good without conveying information--obscure precision...

*Beholder words:*
-  Bad:    We used various methods to isolate four samples.
-  Better: We isolated four samples.

*Lazy Words:*
- Bad:    False positives were surprisingly low.
- Better: To our surprise, false positives were low.
- Good:   To our surprise, false positives were low (3%).

#+source: writegood-mode
#+begin_src emacs-lisp :tangle yes
  (use-package writegood-mode)
#+end_src

** Multiple Cursors and Drag-Stuff
Use multiple cursors for search, replace, and text-cleaning tasks. For a demonstration, see http://emacsrocks.com/e13.html. Tangle if need to use this.

#+source: multiple-cursors
#+begin_src emacs-lisp :tangle yes
  (use-package multiple-cursors
    :init
    ;; set to on at start up
    (multiple-cursors-mode)
    ;; When you have an active region that spans multiple lines, the following will add a cursor to each line:
    (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
    (global-set-key (kbd "C-S-c C-e") 'mc/edit-ends-of-lines)
    (global-set-key (kbd "C-S-c C-a") 'mc/edit-beginnings-of-lines)
    ;; When you want to add multiple cursors not based on continuous lines, but based on keywords in the buffer, use:
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this) ; doesn't seem to work
    ;; Rectangular region mode
    (global-set-key (kbd "H-SPC") 'set-rectangular-region-anchor)
    ;; Mark more like this
    (global-set-key (kbd "H-a") 'mc/mark-all-like-this)
    (global-set-key (kbd "H-p") 'mc/mark-previous-like-this)
    (global-set-key (kbd "H-n") 'mc/mark-next-like-this)
    (global-set-key (kbd "H-S-n") 'mc/mark-more-like-this-extended)
    (global-set-key (kbd "H-S-a") 'mc/mark-all-in-region)
    :config
    (setq mc/always-run-for-all t)
    )

#+end_src

#+source: drag-stuff
#+begin_src emacs-lisp :tangle yes
  (use-package drag-stuff
    :init (drag-stuff-global-mode)
    :bind (:map drag-stuff-mode-map
              ("<M-up>" . drag-stuff-up)
              ("<M-down>" . drag-stuff-down)
              ("<M-S-s-left>" . drag-stuff-left)
              ("<M-S-s-right>" . drag-stuff-right)))

#+end_src

#+source: search-replace-regexp-entire-buffer
#+begin_src emacs-lisp :tangle no
    (defun aj/replace-regexp-entire-buffer (pattern replacement)
    "Perform regular-expression replacement throughout buffer."
    (interactive
     (let ((args (query-replace-read-args "Replace" t)))
       (setcdr (cdr args) nil)    ; remove third value returned from query---args
       args))
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward pattern nil t)
        (replace-match replacement)))
    )
  ;; Replace the default key mapping
  ;; (define-key esc-map "%" 'aj/query-replace)

#+end_src

*** aj/query-replace-regex
#+BEGIN_SRC emacs-lisp :tangle yes

  (defun aj/query-replace-regexp (regexp to-string &optional delimited start end)
    "Replace some things after point matching REGEXP with TO-STRING.  As each
  match is found, the user must type a character saying what to do with
  it. This is a modified version of the standard `query-replace-regexp'
  function in `replace.el', This modified version defaults to operating on the
  entire buffer instead of working only from POINT to the end of the
  buffer. For more information, see the documentation of `query-replace-regexp'"
    (interactive
     (let ((common
        (query-replace-read-args
         (concat "Query replace"
             (if current-prefix-arg " word" "")
             " regexp"
             (if (and transient-mark-mode mark-active) " in region" ""))
         t)))
       (list (nth 0 common) (nth 1 common) (nth 2 common)
         (if (and transient-mark-mode mark-active)
             (region-beginning)
           (buffer-end -1))
         (if (and transient-mark-mode mark-active)
             (region-end)
           (buffer-end 1)))))
    (perform-replace regexp to-string t t delimited nil nil start end))
  ;; Replace the default key mapping
  (define-key esc-map [?\C-%] 'aj/query-replace-regexp)

#+END_SRC

*** aj/query-replace
#+source: search-replace-buffer2
#+begin_src emacs-lisp :tangle yes
    ;; from https://emacs.stackexchange.com/questions/249/how-to-search-and-replace-in-the-entire-buffer
    (defun aj/query-replace (from-string to-string &optional delimited start end)
      "Replace some occurrences of FROM-STRING with TO-STRING.  As each match is
    found, the user must type a character saying what to do with it. This is a
    modified version of the standard `query-replace' function in `replace.el',
    This modified version defaults to operating on the entire buffer instead of
    working only from POINT to the end of the buffer. For more information, see
    the documentation of `query-replace'"
      (interactive
       (let ((common
              (query-replace-read-args
               (concat "Query replace"
                       (if current-prefix-arg " word" "")
                       (if (and transient-mark-mode mark-active) " in region" ""))
               nil)))
         (list (nth 0 common) (nth 1 common) (nth 2 common)
               (if (and transient-mark-mode mark-active)
                   (region-beginning)
                 (buffer-end -1))
               (if (and transient-mark-mode mark-active)
                   (region-end)
                 (buffer-end 1)))))
      (perform-replace from-string to-string t nil delimited nil nil start end)
      )
    ;; Replace the default key mapping
  (define-key esc-map "%" 'aj/query-replace)
    ;; (define-key glob-map "%" 'aj/query-replace)

#+end_src

#+RESULTS: search-replace-buffer2
: aj/query-replace

First mark the word, then add more cursors. To get out of multiple-cursors-mode, press <return> or C-g. The latter will first disable multiple regions before disabling multiple cursors. If you want to insert a newline in multiple-cursors-mode, use C-j

*** Delimiters and other stuff
#+source: rainbow-delmitiers
#+begin_src emacs-lisp :tangle yes
  (use-package rainbow-delimiters
    :init
    (progn
      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)))

#+end_src

#+source: aggressive-indent
#+begin_src emacs-lisp :tangle yes
  ;; disable defualt indents
  (electric-indent-mode -1)
  ;; use aggressive indent instead
  (use-package aggressive-indent
    :ensure t
    :init
    (progn
    (global-aggressive-indent-mode 1)))

#+end_src

#+source: paren-face
#+begin_src emacs-lisp :tangle yes
  ;; this package reduces how paren-faces look
  (use-package paren-face
    :init
    (global-paren-face-mode)
    :config
    (add-hook 'prog-mode-hook (lambda () (setq paren-face-regexp "#?[](){}[]"))))

#+end_src

** Highlight TO-DOs
Highlight various =.ANCHORS.= in comments.

#+source: hl-todo
#+begin_src emacs-lisp :tangle yes
  ;; NOTE that the highlighting works even outside comments where TODO would usually be kept
  ;; The below words were configured to make migration my work from vscode to emacs easier
  ;; as they were already words used for project management
  ;; https://htmlcolorcodes.com/
  (use-package hl-todo
    :config
    ;; Adding a new keyword: ANCHOR and REVIEW.
    (add-to-list 'hl-todo-keyword-faces '("ANCHOR" . "#DAF7A6"))
    (add-to-list 'hl-todo-keyword-faces '("REVIEW" . "#5eff33"))
    (add-to-list 'hl-todo-keyword-faces '("NOTE" . "#ff8e33"))
    (add-to-list 'hl-todo-keyword-faces '("TODO" . "#ff3349"))
    (add-to-list 'hl-todo-keyword-faces '("SYNOPSIS" . "#4fd4ff"))
    :init
    (add-hook 'text-mode-hook (lambda () (hl-todo-mode t))))

#+end_src

** highlight-indent-guides
for better code navigation
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package highlight-indent-guides
    :hook (prog-mode . highlight-indent-guides-mode)
    :config
    (setq highlight-indent-guides-method 'character
          highlight-indent-guides-character ?\|
          ;; highlight-indent-guides-responsive 'stack
          ;; highlight-indent-guides-delay 0
          )
    ;; (setq highlight-indent-guides-auto-odd-face-perc 15)
    ;; (setq highlight-indent-guides-auto-even-face-perc 15)
    ;; (setq highlight-indent-guides-auto-character-face-perc 20)
    )

#+END_SRC

** TODO Project Management and Navigation
*** projectile
#+source: projectile
#+begin_src emacs-lisp :tangle yes
  (use-package ag)
  (use-package projectile
    :requires ag
    :init (projectile-global-mode)
    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+end_src
*** ace-jump
#+source: ace-jump-mode
#+begin_src emacs-lisp :tangle yes
  (use-package ace-jump-mode
    ;; this kbd originally in the bottom window thing
    :bind ("<f7>" . ace-jump-mode))
#+end_src
*** window-numbering
#+source: window-numbering
#+begin_src emacs-lisp :tangle no
  (setq-default mode-line-format (list
                                " "
                                '(:eval (window-parameter (selected-window) 'ace-window-path))
                                '(:eval (if (vc-backend buffer-file-name)
                                            (list
                                             (propertize octicon-octoface 'face 'octicons-modeline)
                                             (propertize " "              'face 'mode-line))))
                                mode-line-mule-info
                                'mode-line-modified
                                "-  "
                                'mode-line-buffer-identification
                                "  (%l, %c)  "
                                'mode-line-modes
                                " -- "
                                `(vc-mode vc-mode)
                                ))
#+end_src
*** ace-window
#+source: ace-window
#+begin_src emacs-lisp :tangle yes
  (use-package ace-window
    :defer t
    :init
    (progn
      (global-set-key (kbd "<f8>") 'ace-window)
      (global-set-key (kbd "M-]") 'ace-window)
      (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
      ;;more info at https://github.com/abo-abo/ace-window
      )
    )
#+end_src
*** frog-jump-buffer
#+source: frog-jump-buffer
#+begin_src emacs-lisp :tangle yes
  (use-package frog-jump-buffer
    :load-path "src/frog-jump-buffer/"
    :bind ("<f9>" . frog-jump-buffer))
#+end_src
*** restart-emacs
#+source: restart-emacs
#+begin_src emacs-lisp :tangle yes
  ;; get restart-emacs for easy restarting when updating config
  (use-package restart-emacs
    :config
    (setq restart-emacs-restore-frames nil))
#+end_src
*** crux
#+source: crux-open-with-system-def-app
#+begin_src emacs-lisp :tangle yes
  (use-package crux
    :bind (("C-c o" . crux-open-with)
           ("C-a" . crux-move-beginning-of-line)))
#+end_src

*** imenu-list
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package imenu-list
    :bind ("s-\\" . imenu-list-smart-toggle)
    :config
    (setq imenu-list-focus-after-activation t)
    (setq imenu-list-auto-resize t)
    (imenu-list-minor-mode 1)
    )

#+END_SRC
*** elisp-slime-nav
#+BEGIN_SRC emacs-lisp
  ;; only works in .lisp files
  ;; Slime-style navigation of Emacs Lisp source with M-. & M-,
  (use-package elisp-slime-nav
    :config
    (dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook))
      (add-hook hook 'turn-on-elisp-slime-nav-mode))
    :hook
    (org-mode . elisp-slime-nav-mode)
    )
#+END_SRC

*** DONE ediff-setup
CLOSED: [2020-01-29 Wed 21:39]
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; from <https://oremacs.com/2015/01/17/setting-up-ediff/>
  (use-package ediff
    :config
    (setq ediff-window-setup-function 'ediff-setup-windows-plain
          ediff-split-window-function 'split-window-horizontally
          ediff-diff-options "-w")
    )

  ;; (winner-mode)
  ;; (add-hook 'ediff-after-quit-hook-internal 'winner-undo)
#+END_SRC

*** IN-PROGRESS magit-todos
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; See TODOs in magit buffer
  ;; need to also have other hl-todo keywords
  ;; (use-package magit-todos
  ;;   :config
  ;;   (magit-todos-mode)
  ;;   )
  (use-package magit-todos
    ;; :ensure t
    ;; :load-path "~/CodeWorks/emacs/magit-todos"
    :commands (magit-todos-mode)
    :hook (magit-mode . magit-todos-mode)
    :config
    (setq magit-todos-recursive t
          magit-todos-depth 100)
    (custom-set-variables
     '(magit-todos-keywords (list "TODO" "FIXME" "REVIEW")))
    ;; :custom (magit-todos-keywords (list "TODO" "FIXME"))
    )

#+END_SRC

*** IN-PROGRESS imenu
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; cool counsel based heading navigation
  ;; need to work out how to have it alphabetical
  (use-package imenu
    :ensure nil
    :bind (("C-M-s-," . imenu))
    )

  ;; not working
  ;; (ivy-configure 'counsel-imenu
  ;;    :update-fn 'auto)

#+END_SRC

** TODO MAKEFILE
See make-mode config here: https://www.emacswiki.org/emacs/MakefileMode
and the makefile section here: https://github.com/emacs-tw/awesome-emacs#makefile
** Keep packages up to date
#+source: updater
#+begin_src emacs-lisp :tangle yes
  (use-package auto-package-update
  :config
  (setq auto-package-update-prompt-before-update t)
  (setq auto-package-update-delete-old-versions t)
  (setq auto-package-update-hide-results t)
  (auto-package-update-maybe))
#+end_src

** IN-PROGRESS Testing packages
*** DONE counsel, swiper, ivy
CLOSED: [2020-01-23 Thu 22:24]
https://github.com/abo-abo/swiper
swiper replaces isearch: this looks really cool, and more flexible.
ivy replaces ido, may have to update for use with ivy below.
avy-jump: will replace ace-jump, by the same maintainer as the above packages.
Note, that this may interfere with the ido-config in the config.org.

**** DONE ALL
CLOSED: [2020-01-23 Thu 08:04]

I want to change to the above packages, however this is been problematic.
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; from https://www.reddit.com/r/emacs/comments/910pga/tip_how_to_use_ivy_and_its_utilities_in_your/
  (use-package ido
    :defer t) ; this seems to be necessary so teh below config doesn't fail

  (global-unset-key (kbd "C-s"))
  (global-unset-key (kbd "C-r"))


  (use-package counsel
    :after ivy
    :config
    (setq counsel-describe-function-function #'helpful-callable)
    (setq counsel-describe-variable-function #'helpful-variable)
    (counsel-mode))

  (use-package ivy
    :defer 0.1
    :diminish
    :bind (("C-c C-r" . ivy-resume)
           ("C-x B" . ivy-switch-buffer-other-window))
    :custom
    (ivy-count-format "(%d/%d) ")
    (ivy-use-virtual-buffers t)
    :config
    (ivy-mode)
    )

  (use-package ivy-rich
    :after ivy
    :custom
    (ivy-virtual-abbreviate 'full
                            ivy-rich-switch-buffer-align-virtual-buffer t
                            ivy-rich-path-style 'abbrev)
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer
                                 'ivy-rich-switch-buffer-transformer))

  (use-package swiper
    :after ivy
    :bind (("C-s" . swiper)
           ("C-r" . swiper)))

  (use-package all-the-icons-ivy
    :ensure t
    :config
    (all-the-icons-ivy-setup))

  ;; (use-package ivy-prescient
  ;;   :after counsel
  ;;   :config
  ;;   (ivy-prescient-mode)
  ;;   )

  (use-package counsel-projectile
    :after projectile
    :demand t
    :config
    (counsel-projectile-mode)
    )

  (use-package prescient)
  (use-package ivy-prescient
    :demand t
    :after counsel
    :config
    (ivy-prescient-mode)
    )

#+END_SRC

*** DONE [#A] fix-word
CLOSED: [2020-01-22 Wed 11:00]
https://github.com/mrkkrp/fix-word
#+BEGIN_SRC emacs-lisp
  ;; replaces built-in upcase, etc.
  (use-package fix-word
      :ensure t
      :bind (
             ("M-u" . fix-word-upcase)
             ("M-l" . fix-word-downcase)
             ("M-c" . fix-word-capitalize)
             ))

#+END_SRC

*** linum relative
https://github.com/coldnew/linum-relative
*** ace-link
https://github.com/abo-abo/ace-link
*** DONE [#B] Helpful
CLOSED: [2020-01-22 Wed 11:00]
https://github.com/Wilfred/helpful
#+BEGIN_SRC emacs-lisp
  ;; replaces built-in help
  (use-package helpful
    :bind (
           ;; Note that the built-in `describe-function' includes both functions
           ;; and macros. `helpful-function' is functions only, so we provide
           ;; `helpful-callable' as a drop-in replacement.
           ("C-h f" . helpful-callable)

           ("C-h v" . helpful-variable)
           ("C-h k" . helpful-key)
           ;; Lookup the current symbol at point. C-c C-d is a common keybinding
           ;; for this in lisp modes.
           ("C-c C-d" . helpful-at-point)

           ;; Look up *F*unctions (excludes macros).
           ;;
           ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
           ;; already links to the manual, if a function is referenced there.
           ("C-h F" . helpful-function)

           ;; Look up *C*ommands.
           ;;
           ;; By default, C-h C is bound to describe `describe-coding-system'. I
           ;; don't find this very useful, but it's frequently useful to only
           ;; look at interactive functions.
           ("C-h C" . helpful-command)
           )
    :ensure t)
#+END_SRC

*** DONE centaur-tab
CLOSED: [2020-01-22 Wed 13:56]
https://github.com/ema2159/centaur-tabs
#+BEGIN_SRC emacs-lisp
  (use-package centaur-tabs
    :demand
    :config
    (centaur-tabs-mode t)
    (setq centaur-tabs-set-icons t
          centaur-tabs-set-bar 'left
          uniquify-separator "/"
          centaur-tabs-gray-out-icons 'buffer
          centaur-tabs-set-modified-marker t
          centaur-tabs-modified-marker "*"
          centaur-tabs-cycle-scope 'tabs)
    (defun centaur-tabs-buffer-groups ()
      "`centaur-tabs-buffer-groups' control buffers' group rules.

   Group centaur-tabs with mode if buffer is derived from `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.
   All buffer name start with * will group to \"Emacs\".
   Other buffer group by `centaur-tabs-get-group-name' with project name."
      (list
       (cond
        ;; ((not (eq (file-remote-p (buffer-file-name)) nil))
        ;; "Remote")
        ((or (string-equal "*" (substring (buffer-name) 0 1))
             (memq major-mode '(magit-process-mode
                                magit-status-mode
                                magit-diff-mode
                                magit-log-mode
                                magit-file-mode
                                magit-blob-mode
                                magit-blame-mode
                                )))
         "Emacs")
        ((derived-mode-p 'prog-mode)
         "Editing")
        ((derived-mode-p 'dired-mode)
         "Dired")
        ((memq major-mode '(helpful-mode
                            help-mode))
         "Help")
        ((memq major-mode '(org-mode
                            org-agenda-clockreport-mode
                            org-src-mode
                            org-agenda-mode
                            org-beamer-mode
                            org-indent-mode
                            org-bullets-mode
                            org-cdlatex-mode
                            org-agenda-log-mode
                            diary-mode))
         "OrgMode")
        (t
         (centaur-tabs-get-group-name (current-buffer))))))
    :hook
    (dashboard-mode . centaur-tabs-local-mode)
    (term-mode . centaur-tabs-local-mode)
    (calendar-mode . centaur-tabs-local-mode)
    (org-agenda-mode . centaur-tabs-local-mode)
    (helpful-mode . centaur-tabs-local-mode)
    :bind
    ("C-<prior>" . centaur-tabs-backward)
    ("C-<next>" . centaur-tabs-forward)
    ("C-c t s" . centaur-tabs-counsel-switch-group)
    ("C-c t p" . centaur-tabs-group-by-projectile-project)
    ("C-c t g" . centaur-tabs-group-buffer-groups))

#+END_SRC

*** DONE rainbow mode
CLOSED: [2020-01-22 Wed 11:25]
https://github.com/emacsmirror/rainbow-mode

#+BEGIN_SRC emacs-lisp
  ;; colorise colour references
  (use-package rainbow-mode
    :config (rainbow-mode t))

#+END_SRC

*** DONE [#A] company-quick help (and pos-tip)
CLOSED: [2020-01-22 Wed 11:00]
https://github.com/company-mode/company-quickhelp
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package pos-tip)
  ;; pop-up helpmenu when company used
  ;; this may become annoying, so be aware
  (use-package company-quickhelp
    :requires pos-tip
    :config
    (company-quickhelp-mode))
#+END_SRC
*** company box
alternative to above
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Better sorting and filtering
  (use-package company-prescient
    :init (company-prescient-mode 1))

  ;; Icons and quickhelp
  (use-package company-box
    :diminish
    :hook (company-mode . company-box-mode)
    :init (setq company-box-backends-colors nil
                company-box-show-single-candidate t
                company-box-max-candidates 50
                company-box-doc-delay 0.5)
    :config
    (with-no-warnings
      ;; Highlight `company-common'
      (defun my-company-box--make-line (candidate)
        (-let* (((candidate annotation len-c len-a backend) candidate)
                (color (company-box--get-color backend))
                ((c-color a-color i-color s-color) (company-box--resolve-colors color))
                (icon-string (and company-box--with-icons-p (company-box--add-icon candidate)))
                (candidate-string (concat (propertize (or company-common "") 'face 'company-tooltip-common)
                                          (substring (propertize candidate 'face 'company-box-candidate)
                                                     (length company-common) nil)))
                (align-string (when annotation
                                (concat " " (and company-tooltip-align-annotations
                                                 (propertize " " 'display `(space :align-to (- right-fringe ,(or len-a 0) 1)))))))
                (space company-box--space)
                (icon-p company-box-enable-icon)
                (annotation-string (and annotation (propertize annotation 'face 'company-box-annotation)))
                (line (concat (unless (or (and (= space 2) icon-p) (= space 0))
                                (propertize " " 'display `(space :width ,(if (or (= space 1) (not icon-p)) 1 0.75))))
                              (company-box--apply-color icon-string i-color)
                              (company-box--apply-color candidate-string c-color)
                              align-string
                              (company-box--apply-color annotation-string a-color)))
                (len (length line)))
          (add-text-properties 0 len (list 'company-box--len (+ len-c len-a)
                                           'company-box--color s-color)
                               line)
          line))
      (advice-add #'company-box--make-line :override #'my-company-box--make-line)

      ;; Prettify icons
      (defun my-company-box-icons--elisp (candidate)
        (when (derived-mode-p 'emacs-lisp-mode)
          (let ((sym (intern candidate)))
            (cond ((fboundp sym) 'Function)
                  ((featurep sym) 'Module)
                  ((facep sym) 'Color)
                  ((boundp sym) 'Variable)
                  ((symbolp sym) 'Text)
                  (t . nil)))))
      (advice-add #'company-box-icons--elisp :override #'my-company-box-icons--elisp))

    (when (and (display-graphic-p)
               (require 'all-the-icons nil t))
      (declare-function all-the-icons-faicon 'all-the-icons)
      (declare-function all-the-icons-material 'all-the-icons)
      (declare-function all-the-icons-octicon 'all-the-icons)
      (setq company-box-icons-all-the-icons
            `((Unknown . ,(all-the-icons-material "find_in_page" :height 0.85 :v-adjust -0.2))
              (Text . ,(all-the-icons-faicon "text-width" :height 0.8 :v-adjust -0.05))
              (Method . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.05 :face 'all-the-icons-purple))
              (Function . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.05 :face 'all-the-icons-purple))
              (Constructor . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.05 :face 'all-the-icons-purple))
              (Field . ,(all-the-icons-octicon "tag" :height 0.8 :v-adjust 0 :face 'all-the-icons-lblue))
              (Variable . ,(all-the-icons-octicon "tag" :height 0.8 :v-adjust 0 :face 'all-the-icons-lblue))
              (Class . ,(all-the-icons-material "settings_input_component" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-orange))
              (Interface . ,(all-the-icons-material "share" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-lblue))
              (Module . ,(all-the-icons-material "view_module" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-lblue))
              (Property . ,(all-the-icons-faicon "wrench" :height 0.8 :v-adjust -0.05))
              (Unit . ,(all-the-icons-material "settings_system_daydream" :height 0.85 :v-adjust -0.2))
              (Value . ,(all-the-icons-material "format_align_right" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-lblue))
              (Enum . ,(all-the-icons-material "storage" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-orange))
              (Keyword . ,(all-the-icons-material "filter_center_focus" :height 0.85 :v-adjust -0.2))
              (Snippet . ,(all-the-icons-material "format_align_center" :height 0.85 :v-adjust -0.2))
              (Color . ,(all-the-icons-material "palette" :height 0.85 :v-adjust -0.2))
              (File . ,(all-the-icons-faicon "file-o" :height 0.85 :v-adjust -0.05))
              (Reference . ,(all-the-icons-material "collections_bookmark" :height 0.85 :v-adjust -0.2))
              (Folder . ,(all-the-icons-faicon "folder-open" :height 0.85 :v-adjust -0.05))
              (EnumMember . ,(all-the-icons-material "format_align_right" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-lblue))
              (Constant . ,(all-the-icons-faicon "square-o" :height 0.85 :v-adjust -0.1))
              (Struct . ,(all-the-icons-material "settings_input_component" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-orange))
              (Event . ,(all-the-icons-octicon "zap" :height 0.8 :v-adjust 0 :face 'all-the-icons-orange))
              (Operator . ,(all-the-icons-material "control_point" :height 0.85 :v-adjust -0.2))
              (TypeParameter . ,(all-the-icons-faicon "arrows" :height 0.8 :v-adjust -0.05))
              (Template . ,(all-the-icons-material "format_align_left" :height 0.85 :v-adjust -0.2)))
            company-box-icons-alist 'company-box-icons-all-the-icons)))
#+END_SRC

*** dap-mode
https://github.com/emacs-lsp/dap-mode
mostly for python
*** DONE [#A] dumb-jump
CLOSED: [2020-01-22 Wed 11:00]
https://github.com/jacktasia/dumb-jump
jump to definition, support for R
#+BEGIN_SRC emacs-lisp
  ;; useful for navigationg R code
  (use-package dumb-jump
    :bind (("M-g o" . dumb-jump-go-other-window)
           ("M-g j" . dumb-jump-go)
           ("M-g b" . dumb-jump-back)
           ("M-g i" . dumb-jump-go-prompt)
           ("M-g x" . dumb-jump-go-prefer-external)
           ("M-g z" . dumb-jump-go-prefer-external-other-window))
    :ensure t)

#+END_SRC

*** markdown-mode+
https://github.com/milkypostman/markdown-mode-plus
#+BEGIN_SRC

#+END_SRC

*** no-literring
https://github.com/emacscollective/no-littering
cleanup config
* Custom scripts
Below are my custom scripts. Please note, any associated keybdings are contained under each relevant section.
** Applescript support
#+srcname: applescript
#+begin_src emacs-lisp
  ;; get applecript support for codeblocks within org
  (use-package ob-applescript)

  ;; general applescript-mode
  ;; this is disabled, as it not seem to work as expected
  ;; (use-package applescript-mode
  ;; :load-path "src/applescript-mode")
#+end_src

** Zotero Cite as You Write
This used to access Zotero's citation picker via Better Bibtex.
#+source: zotero-cayw
#+begin_src emacs-lisp :tangle yes
  ;; with courtesy from https://emacs.stackexchange.com/questions/54939/how-do-i-get-request-el-to-post-the-contents-into-the-buffer/54950?noredirect=1#comment85788_54950
  (defun aj/zotero-cayw ()
    "Insert Zotero Cite at point."
    (interactive)
    (insert
     (shell-command-to-string
      "curl -s http://localhost:23119/better-bibtex/cayw?format=pandoc"))
    (do-applescript "tell application \"Emacs\" to activate")
    )

  (global-set-key (kbd "S-s-y") 'aj/zotero-cayw)
#+end_src

** iTerm2 integration

#+source: iterm2
#+begin_src emacs-lisp :tangle yes
  ;; from https://sam217pa.github.io/2016/09/01/emacs-iterm-integration/
  ;; return the directory of the file currently opened. If it is a *scratch* buffer or something like that, it simply returns the home directory
  (defun aj/get-file-dir-or-home ()
    "If inside a file buffer, return the directory, else return home"
    (interactive)
    (let ((filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          "~/"
        (file-name-directory filename))))

  ;; cd to the directory of the file I am editing in emacs. If I am in a *scratch* buffer or something like that, it cd to the $HOME directory. It then focus the iTerm2 app.
  (defun aj/iterm-goto-filedir-or-home ()
    "Go to present working dir and focus iterm"
    (interactive)
    (do-applescript
     (concat
      " tell application \"iTerm2\"\n"
      "   tell the current session of current window\n"
      (format "     write text \"cd %s\" \n" (aj/get-file-dir-or-home))
      "   end tell\n"
      " end tell\n"
      " do shell script \"open -a iTerm\"\n"
      ))
    )

  ;; focus the iTerm2 app, without modifying the working directory
  (defun aj/iterm-focus ()
    (interactive)
    (do-applescript
     " do shell script \"open -a iTerm\"\n"
     ))

  (use-package general)

  (general-define-key
   :prefix "C-x"
    "t" '(aj/iterm-focus :which-key "focus iterm")
    "/" '(aj/iterm-goto-filedir-or-home :which-key "focus iterm - goto dir")
    )

#+end_src

** DONE hs-toggle-fold
CLOSED: [2020-01-22 Wed 11:22]
built in package for code-folding

#+BEGIN_SRC emacs-lisp
  ;; from https://www.reddit.com/r/emacs/comments/746cd0/which_code_folding_package_do_you_use/
  (defun aj/toggle-fold ()
    (interactive)
    (save-excursion
      (end-of-line)
      (hs-toggle-hiding)))

  (global-set-key (kbd "M-[") 'aj/toggle-fold)
  ;; below does the same things but cannot get the symbols

  (use-package hideshowvis
    :load-path "src/hideshowvis/"
    :diminish hs-minor-mode
    :bind ("M-[" . hs-toggle-hiding)
    :config
    (progn
      (hideshowvis-enable)
      ;; graphical +/- fold buttons
      (hideshowvis-symbols))
    )



#+END_SRC

** DONE Kill line backwards
CLOSED: [2020-01-30 Thu 08:55]

#+BEGIN_SRC emacs-lisp
  ;; from https://www.emacswiki.org/emacs/BackwardKillLine
  (defun aj/backward-kill-line (arg)
    "Kill ARG lines backward."
    (interactive "p")
    (kill-line (- 1 arg)))

  (global-set-key "\C-cu" 'aj/backward-kill-line) ;; `C-c u'
#+END_SRC

** IN-PROGRESS Open File Path Under Cursor
This works, but can error sometimes no open when filename contains spaces.
#+source: open-path
#+begin_src emacs-lisp :tangle yes
  ;; (defun xah-open-file-at-cursor ()
  (defun aj/xah-open-file-at-cursor ()
    "Open the file path under cursor.
  If there is text selection, uses the text selection for path.
  If the path starts with “http://”, open the URL in browser.
  Input path can be {relative, full path, URL}.
  Path may have a trailing “:‹n›” that indicates line number. If so, jump to that line number.
  If path does not have a file extension, automatically try with “.el” for elisp files.
  This command is similar to `find-file-at-point' but without prompting for confirmation.

  URL `http://ergoemacs.org/emacs/emacs_open_file_path_fast.html'
  Version 2019-01-16"
    (interactive)
    (let* (($inputStr (if (use-region-p)
                          (buffer-substring-no-properties (region-beginning) (region-end))
                        (let ($p0 $p1 $p2
                                  ;; chars that are likely to be delimiters of file path or url, e.g. whitespace, comma. The colon is a problem. cuz it's in url, but not in file name. Don't want to use just space as delimiter because path or url are often in brackets or quotes as in markdown or html
                                  ($pathStops "^  \t\n\"`'‘’“”|[]{}「」<>〔〕〈〉《》【】〖〗«»‹›❮❯❬❭〘〙·。\\\s\~"))
                          (setq $p0 (point))
                          (skip-chars-backward $pathStops)
                          (setq $p1 (point))
                          (goto-char $p0)
                          (skip-chars-forward $pathStops)
                          (setq $p2 (point))
                          (goto-char $p0)
                          (buffer-substring-no-properties $p1 $p2))))
           ($path
            (replace-regexp-in-string
             "^file:///" "/"
             (replace-regexp-in-string
              ":\\'" "" $inputStr))))
      (if (string-match-p "\\`https?://" $path)
          (if (fboundp 'xahsite-url-to-filepath)
              (let (($x (xahsite-url-to-filepath $path)))
                (if (string-match "^http" $x )
                    (browse-url $x)
                  (find-file $x)))
            (progn (browse-url $path)))
        (if ; not starting “http://”
            (string-match "^\\`\\(.+?\\):\\([0-9]+\\)\\'" $path)
            (let (
                  ($fpath (match-string 1 $path))
                  ($line-num (string-to-number (match-string 2 $path))))
              (if (file-exists-p $fpath)
                  (progn
                    (find-file $fpath)
                    (goto-char 1)
                    (forward-line (1- $line-num)))
                (when (y-or-n-p (format "file no exist: 「%s」. Create?" $fpath))
                  (find-file $fpath))))
           (if (file-exists-p $path)
            (progn ; open f.ts instead of f.js
              (let (($ext (file-name-extension $path))
                    ($fnamecore (file-name-sans-extension $path)))
                (if (and (string-equal $ext "js")
                         (file-exists-p (concat $fnamecore ".ts")))
                    (find-file (concat $fnamecore ".ts"))
                  (find-file $path))))
          (if (file-exists-p (concat $path ".el"))
              (find-file (concat $path ".el"))
            (when (y-or-n-p (format "file no exist: 「%s」. Create?" $path))
              (find-file $path ))))))))
#+end_src


** IN-PROGRESS line-number on debug
#+BEGIN_SRC emacs-lisp :tangle no
  ;; get line number of error
  ;; from https://emacs.stackexchange.com/questions/7852/show-line-number-on-error?lq=1
  (with-eval-after-load 'debug
    (defun debugger-setup-buffer (debugger-args)
      "Initialize the `*Backtrace*' buffer for entry to the debugger.
    That buffer should be current already."
      (setq buffer-read-only nil)
      (erase-buffer)
      (set-buffer-multibyte t)        ;Why was it nil ?  -stef
      (setq buffer-undo-list t)
      (let ((standard-output (current-buffer))
            (print-escape-newlines t)
            (print-level 8)
            (print-length 50))
        (backtrace))
      (goto-char (point-min))
      (delete-region (point)
                     (progn
                       (search-forward "\n  debug(")
                       (forward-line (if (eq (car debugger-args) 'debug)
                                         2    ; Remove implement-debug-on-entry frame.
                                       1))
                       (point)))
      (insert "Debugger entered")
      ;; lambda is for debug-on-call when a function call is next.
      ;; debug is for debug-on-entry function called.
      (pcase (car debugger-args)
        ((or `lambda `debug)
         (insert "--entering a function:\n"))
        ;; Exiting a function.
        (`exit
         (insert "--returning value: ")
         (setq debugger-value (nth 1 debugger-args))
         (prin1 debugger-value (current-buffer))
         (insert ?\n)
         (delete-char 1)
         (insert ? )
         (beginning-of-line))
        ;; Debugger entered for an error.
        (`error
         (insert "--Lisp error: ")
         (prin1 (nth 1 debugger-args) (current-buffer))
         (insert ?\n))
        ;; debug-on-call, when the next thing is an eval.
        (`t
         (insert "--beginning evaluation of function call form:\n"))
        ;; User calls debug directly.
        (_
         (insert ": ")
         (prin1 (if (eq (car debugger-args) 'nil)
                    (cdr debugger-args) debugger-args)
                (current-buffer))
         (insert ?\n)))
      ;; After any frame that uses eval-buffer,
      ;; insert a line that states the buffer position it's reading at.
      (save-excursion
        (let ((tem eval-buffer-list))
          (while (and tem
                      (re-search-forward "^  eval-\\(buffer\\|region\\)(" nil t))
            (beginning-of-line)
            (insert (format "Error at line %d in %s: "
                            (with-current-buffer (car tem)
                              (line-number-at-pos (point)))
                            (with-current-buffer (car tem)
                              (buffer-name))))
            (pop tem))))
      (debugger-make-xrefs)))

#+END_SRC

** mouse scroll-all-mode

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; from  https://www.emacswiki.org/emacs/ScrollAllMode
  ;; allows scrolling diffs in unison
  (defun mwheel-scroll-all-function-all (func &optional arg)
    (if (and scroll-all-mode arg)
        (save-selected-window
          (walk-windows
           (lambda (win)
             (select-window win)
             (condition-case nil
                 (funcall func arg)
               (error nil)))))
      (funcall func arg)))

  (defun mwheel-scroll-all-scroll-up-all (&optional arg)
    (mwheel-scroll-all-function-all 'scroll-up arg))

  (defun mwheel-scroll-all-scroll-down-all (&optional arg)
    (mwheel-scroll-all-function-all 'scroll-down arg))

  (setq mwheel-scroll-up-function 'mwheel-scroll-all-scroll-up-all)
  (setq mwheel-scroll-down-function 'mwheel-scroll-all-scroll-down-all)

#+END_SRC


* TODO Config Tasks
** TODO Citations
This is done, as I've just inserted this citation using the alfred workflow. My attempt with the do-applescript keeps failing so going to try this:
*** TODO reftex
this is too confusing to use, although it does work.
#+source: reftex-md
#+begin_src emacs-lisp :tangle no
  ;; reftex in markdown mode

  ;; if this isn't already set in your .emacs
  (setq reftex-default-bibliography '("/Users/atanas/.pandoc/MyLib.bib"))

  ;; define markdown citation formats
  (defvar markdown-cite-format)
  (setq markdown-cite-format
        '(
          (?\C-m . "[@%l]")
          (?p . "[@%l]")
          (?t . "@%l")
          )
        )

  ;; wrap reftex-citation with local variables for markdown format
  (defun markdown-reftex-citation ()
    (interactive)
    (let ((reftex-cite-format markdown-cite-format)
          (reftex-cite-key-separator "; @"))
      (reftex-citation)))

  ;; bind modified reftex-citation to C-c[, without enabling reftex-mode
  ;; https://www.gnu.org/software/auctex/manual/reftex/Citations-Outside-LaTeX.html#SEC31
  (add-hook
   'markdown-mode-hook
   (lambda ()
     (define-key markdown-mode-map "\C-c[" 'markdown-reftex-citation)))
#+end_src

** TODO Python-IDE
Setup Python-IDE similar to R-IDE
See Centuar setup
** TODO R-IDE
noIt would be good to auto enable company mode on R windows, however this seems to be problematic with golden ratio.
As such, have a keybinding enable to toggle company mode.
** TODO Pandoc
Setup templates and pandoc binaries in defualt.pandoc
** TODO Markdown
Change shortcuts for formatting font faces e.g., bold, italic, etc.
** TODO Ace-Window
Would like ace-window numbers in the modeline, but this is only for looks. Will keep here as a TODO and then review. Not important really.: xah-open-file-at-cursor
** TODO setup straight.el to replace quelpa
** TODO setup general.el for all keybindings
* Experiments

#+BEGIN_SRC emacs-lisp :tangle no
  ;; cool counsel based heading navigation
  ;; need to work out how to have it alphabetical
  (use-package imenu
    :ensure nil
    :bind (("C-M-<" . imenu))
    )


  ;; R-lsp config, not really working as expected
  (with-eval-after-load 'lsp-mode
    (lsp-register-client
     (make-lsp-client :new-connection (lsp-stdio-connection '("R" "--slave" "-e" "languageserver::run()"))
                      :major-modes '(ess-r-mode)
                      :server-id 'lsp-R))
    (add-hook 'R-mode-hook #'lsp-R-enable)
    )

  (ess :variables ess-r-backend 'lsp)
#+END_SRC
