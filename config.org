#+Title: Yay-Evil distro by Ian Y.E. Pan
#+Author: Ian Y.E. Pan
#+Date: 2019
Welcome! This Emacs "distro" is based on my personal Emacs configuration (on GNU Emacs 26.3). It's unopinionated and was created for general use in mind. The package settings are grouped in a logical manner, and I've documented as detailed as possible what each code snippet does in this file.
* Settings without corresponding packages
Clean up the UI and enhance some basic defaults defined in "C Source Code". The variable ~ian/indent-width~ controls the default indentation across various programming modes. The default is 4, you can change this variable to 2 or any other indentation width you prefer, and the change will be made across all programming language modes including C, C++, Java, JavaScript, Python etc.
#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :preface
    (defvar ian/indent-width 4)      ; change this value to your preferred width
    :bind
    ("C-+" . text-scale-increase)
    ("C--" . text-scale-decrease)
    :config
    (setq frame-title-format "%b"    ; set to bufer title name
          ring-bell-function 'ignore ; minimise distraction
          frame-resize-pixelwise t
          default-directory "~/")

    (tool-bar-mode -1)
    (menu-bar-mode 1)                ; menu-bar on, I like it this way

    ;; better scrolling experience
    (setq scroll-margin 0
          scroll-conservatively 10000
          scroll-preserve-screen-position t
          auto-window-vscroll nil)

    ;; increase line space for better readability
    (setq-default line-spacing 3)

    ;; Always use spaces for indentation
    (setq-default indent-tabs-mode nil
                  tab-width ian/indent-width))
#+END_SRC
* Map fn to Hyper, CMD to Super
#+source: fn-to-hyper
#+begin_src emacs-lisp :tangle no
  ;; from  kjkeayl's config, however the remainder below at this stage not required
  ;; set keys for Apple keyboard, for emacs in OS X
  (setq ns-command-modifier 'super) ; make cmd key do Super
  ;; (setq mac-option-modifier 'super) ; make opt key do Super
  ;; (setq mac-control-modifier 'control) ; make Control key do Control
  (setq ns-function-modifier 'hyper)  ; make Fn key do Hyper

  ;; fix page-up and page-down keys

  ;; (defun sfp-page-down (&optional arg)
  ;;   (interactive "^P")
  ;;   (setq this-command 'next-line)
  ;;   (next-line
  ;;    (- (window-text-height)
  ;;       next-screen-context-lines)))
  ;; (put 'sfp-page-down 'isearch-scroll t)
  ;; (put 'sfp-page-down 'CUA 'move)

  ;; (defun sfp-page-up (&optional arg)
  ;;   (interactive "^P")
  ;;   (setq this-command 'previous-line)
  ;;   (previous-line
  ;;    (- (window-text-height)
  ;;       next-screen-context-lines)))
  ;; (put 'sfp-page-up 'isearch-scroll t)
  ;; (put 'sfp-page-up 'CUA 'move)

  ;; (global-set-key [(H down)] 'scroll-up)
  ;; (global-set-key [(H up)]   'scroll-down)
  ;; (use-package scroll-lock
  ;;   :init
  ;;   (setq scroll-preserve-screen-position t))

#+end_src
* Configuration for built-in packages
Since we're using use-package as our package management system, we might as well try to organise under the same syntax as much as possible to keep the configuration consistent. The option ~use-package-always-ensure~ is turned on in ~init.el~, so we'll add ~:ensure nil~ when configuring the built-in packages.
** Undo-Tree
I think this is important to have upfront, so that it does not conflict with other keybindings, particularly the R-IDE pipe and assign operators.
#+source: undo-tree
#+begin_src emacs-lisp
   (eval-after-load 'undo-tree
    '(progn
       (define-key undo-tree-map (kbd "C-/") nil)
       (define-key undo-tree-map (kbd "C-_") nil)
       (define-key undo-tree-map (kbd "C-?") nil)
       (define-key undo-tree-map (kbd "M-_") nil)
       (define-key undo-tree-map (kbd "C-z") 'undo-tree-undo)
       (define-key undo-tree-map (kbd "C-S-z") 'undo-tree-redo)))

  (use-package undo-tree
    :config
    (global-undo-tree-mode 1))
#+end_src
** Omit default startup screen
#+BEGIN_SRC emacs-lisp
  (use-package "startup"
    :ensure nil
    :config (setq inhibit-startup-screen t))
#+END_SRC
** Modernise selection behaviour
Replace the active region just by typing text, just like modern editors
#+BEGIN_SRC emacs-lisp
  (use-package delsel
    :ensure nil
    :config (delete-selection-mode +1))
#+END_SRC
** Disable scroll-bar
#+BEGIN_SRC emacs-lisp
  (use-package scroll-bar
    :ensure nil
    :config (scroll-bar-mode -1))
#+END_SRC
** Enable column numbers
#+BEGIN_SRC emacs-lisp
  (use-package simple
    :ensure nil
    :config (column-number-mode +1))
#+END_SRC
** Split right and split below
The Emacs default split doesn't seem too intuitive for the majority of users.
#+BEGIN_SRC emacs-lisp
  (use-package "window"
    :ensure nil
    :preface
    (defun ian/split-and-follow-horizontally ()
      "Split window below."
      (interactive)
      (split-window-below)
      (other-window 1))
    (defun ian/split-and-follow-vertically ()
      "Split window right."
      (interactive)
      (split-window-right)
      (other-window 1))
    :config
    (global-set-key (kbd "C-x 2") #'ian/split-and-follow-horizontally)
    (global-set-key (kbd "C-x 3") #'ian/split-and-follow-vertically))
#+END_SRC
** File-related tweaks
Don't bother confirming killing processes and don't let backup~ files scatter around
#+BEGIN_SRC emacs-lisp
  (use-package files
    :ensure nil
    :config
    (setq confirm-kill-processes nil
          make-backup-files nil))
#+END_SRC
** Automatically refreshes the buffer for changes outside of Emacs
Auto refreshes every 2 seconds. Don't forget to refresh the version control status as well.
#+BEGIN_SRC emacs-lisp
  (use-package autorevert
    :ensure nil
    :config
    (global-auto-revert-mode +1)
    (setq auto-revert-interval 2
          auto-revert-check-vc-info t
          global-auto-revert-non-file-buffers t
          auto-revert-verbose nil))
#+END_SRC
** Eldoc: documentation in the mini-buffer
Only use eldoc in prog-mode (by defaults it's turned on globally, but reports say it hinders performance).
#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :ensure nil
    :diminish eldoc-mode
    :config
    (global-eldoc-mode +1)
    (setq eldoc-idle-delay 0.4))
#+END_SRC
** Indentation improvement
For Java and C/C++, change the formatting style from GNU (the default) to the more standard K&R. Here we also set the indentation width of C, C++, Java, JavaScript, and Python to the preferred value defined in ~ian/indent-width~. Of course, you can change the value depending on the language as well.
#+BEGIN_SRC emacs-lisp
  ;; C, C++, and Java
  (use-package cc-vars
    :ensure nil
    :config
    (setq-default c-basic-offset ian/indent-width)
    (setq c-default-style '((java-mode . "java")
                            (awk-mode . "awk")
                            (other . "k&r"))))

  ;; JavaScript
  (use-package js
    :ensure nil
    :config (setq js-indent-level ian/indent-width))

  ;; Python (both v2 and v3)
  (use-package python
    :ensure nil
    :config (setq python-indent-offset ian/indent-width))
#+END_SRC
** Mouse wheel (track-pad) scroll speed
By default, the scrolling is way too fast to be precise and helpful, let's tune it down a little bit.
#+BEGIN_SRC emacs-lisp
  (use-package mwheel
    :ensure nil
    :config (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))
                  mouse-wheel-progressive-speed nil))
#+END_SRC
** Show matching parentheses
Reduce the highlight delay to instantly.
#+BEGIN_SRC emacs-lisp
  (use-package paren
    :ensure nil
    :init (setq show-paren-delay 0)
    :config (show-paren-mode +1))

  ;; jump to mathcing paren
  (global-set-key (kbd "C-M-f") 'forward-sexp)
  (global-set-key (kbd "C-M-b") 'backward-sexp)
#+END_SRC
** Setting up some frame defaults
Maximise the frame by default on start-up. Set the font to Menlo size 13, if Menlo is installed.
#+BEGIN_SRC emacs-lisp
  (use-package frame
    :ensure nil
    :config
    (setq initial-frame-alist (quote ((fullscreen . maximized))))
    (when (member "Menlo" (font-family-list))
      (set-frame-font "menlo-13:weight=regular" t t)))
#+END_SRC
** Ediff tweaks
Enter ediff with side-by-side buffers to better compare the differences.
#+BEGIN_SRC emacs-lisp
  (use-package ediff
    :ensure nil
    :config (setq ediff-split-window-function 'split-window-horizontally))
#+END_SRC
** Auto-pairing quotes and parentheses etc.
Electric-pair-mode has improved quite a bit in recent Emacs versions. No longer need an extra package for this. It also takes care of the new-line-and-push-brace feature.
#+BEGIN_SRC emacs-lisp
  (use-package elec-pair
    :ensure nil
    :hook (prog-mode . electric-pair-mode))
#+END_SRC
** Clean up whitespace on save
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :ensure nil
    :hook (before-save . whitespace-cleanup))
#+END_SRC
** Dired tweaks
Delete intermediate buffers when navigating through dired.
#+begin_src emacs-lisp
    (use-package dired
      :ensure nil
      :config
      (setq delete-by-moving-to-trash t)
      (eval-after-load "dired"
        #'(lambda ()
            (put 'dired-find-alternate-file 'disabled nil)
            (define-key dired-mode-map (kbd "RET") #'dired-find-alternate-file))))
    ;; add subtree searching so as not to use
    (use-package dired-subtree
      :config
      (bind-keys :map dired-mode-map
                 ("i" . dired-subtree-insert)
                 (";" . dired-subtree-remove)))
    ;; add some colour
    (use-package dired-rainbow
      :config
      (progn
        (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
        (dired-rainbow-define html "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
        (dired-rainbow-define xml "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
        (dired-rainbow-define document "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
        (dired-rainbow-define markdown "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
        (dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
        (dired-rainbow-define media "#de751f" ("mp3" "mp4" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac"))
        (dired-rainbow-define image "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
        (dired-rainbow-define log "#c17d11" ("log"))
        (dired-rainbow-define shell "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
        (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
        (dired-rainbow-define compiled "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
        (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
        (dired-rainbow-define compressed "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
        (dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
        (dired-rainbow-define encrypted "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
        (dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
        (dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
        (dired-rainbow-define vc "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
        (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*")
        ))
#+end_src
** Dump custom-set-variables to a garbage file and don't load it
#+BEGIN_SRC emacs-lisp
  (use-package cus-edit
    :ensure nil
    :config
    (setq custom-file "~/.emacs.d/to-be-dumped.el"))
#+END_SRC
* Third-party packages
Many Emacsers love having tons of packages -- and that's absolutely fine! However, one of the goals of the Yay-Evil distro is to provide an essential-only foundation for users to build upon. Therefore, only the most important packages and/or lightweight improvements will be included here. For example, completion frameworks like Ivy or Helm are considered heavy by many, yet the built-in Ido serves almost the same purpose. The only arguably opinionated package is probably Evil, but you probably saw that coming from the distro name, didn't you ;) ? If you prefer the default keybindings, simply disable the section that controls the Evil behaviours.

Normally, we need to add ~:ensure t~ to tell ~use-package~ to download packages when it's not available. But since we've added ~use-package-always-ensure~ in ~init.el~, we can omit it.
** GUI enhancements
*** Load custom theme
#+BEGIN_SRC emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
  ;; (load-theme 'wilmersdorf t) ; this was Ian's custom, disabled for the below instead

  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t))
#+END_SRC
*** Modeline
**** all-the-icons
#+BEGIN_SRC emacs-lisp
  (use-package quelpa-use-package)
  (require 'font-lock)
  (use-package font-lock+)
  ;; commented as only needed to install once, slows down load time otherwise
  ;; :quelpa
  ;; (font-lock+ :repo "emacsmirror/font-lock-plus" :fetcher github))

  (use-package all-the-icons)
#+END_SRC
**** doom-modeline
#+BEGIN_SRC emacs-lisp
  ;; see github repo for options on further config if desired
  (use-package nyan-mode
    :config
    (nyan-mode))
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :config (setq doom-modeline-height 25))
#+END_SRC
*** Dashboard welcome page
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner "~/.emacs.d/assets/einstein2.png" ; 'logo
          dashboard-banner-logo-title "\"If you can't explain it simply, you don't understand it well enough.\""
          dashboard-items nil
          dashboard-set-footer nil))
#+END_SRC
*** Syntax highlighting
Lightweight syntax highlighting improvement for numbers, operators, and escape sequences.
#+BEGIN_SRC emacs-lisp
  (use-package highlight-numbers
    :hook (prog-mode . highlight-numbers-mode))

  (use-package highlight-operators
    :hook (prog-mode . highlight-operators-mode))

  (use-package highlight-escape-sequences
    :hook (prog-mode . hes-mode))
#+END_SRC
** Vi keybindings
I personally find Vi(m) bindings to be the most efficient way of editing text (especially code). I also changed the default ~:q~ and ~:wq~ to be killing current buffer instead of killing the frame or subsequently killing Emacs.
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package evil
    :diminish undo-tree-mode
    :init
    (setq evil-want-C-u-scroll t
          evil-want-keybinding nil
          evil-shift-width ian/indent-width)
    :hook (after-init . evil-mode)
    :preface
    (defun ian/save-and-kill-this-buffer ()
      (interactive)
      (save-buffer)
      (kill-this-buffer))
    :config
    (with-eval-after-load 'evil-maps ; avoid conflict with company tooltip selection
      (define-key evil-insert-state-map (kbd "C-n") nil)
      (define-key evil-insert-state-map (kbd "C-p") nil))
    (evil-ex-define-cmd "q" #'kill-this-buffer)
    (evil-ex-define-cmd "wq" #'ian/save-and-kill-this-buffer))
#+END_SRC
Evil-collection covers more parts of Emacs that the original Evil doesn't support (e.g. Packages buffer, eshell, calendar etc.)
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-company-use-tng nil)
    (evil-collection-init))
#+END_SRC
Tim Pope's vim commentary package (Use ~gcc~ to comment out a line, ~gc~ to comment out the target of a motion (for example, ~gcap~ to comment out a paragraph), ~gc~ in visual mode to comment out the selection etc.)
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package evil-commentary
    :after evil
    :diminish
    :config (evil-commentary-mode +1))
#+END_SRC
Evil keybindings for magit.
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package evil-magit)
#+END_SRC
** Git Integration
Tell magit to automatically put us in vi-insert-mode when committing a change.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status))
    ;; :config (add-hook 'with-editor-mode-hook #'evil-insert-state)) ; commented as providing errors
#+END_SRC
** Searching/sorting enhancements & project management
*** Ido, ido-vertical, ido-ubiquitous and fuzzy matching
Selecting buffers/files with great efficiency. In my opinion, Ido is enough to replace Ivy/Counsel and Helm. We install ido-vertical to get a better view of the available options (use ~C-n~, ~C-p~ or arrow keys to navigate). Ido-ubiquitous (from the ~ido-completing-read+~ package) provides us ido-like completions in describing functions and variables etc. Fuzzy matching is a nice feature and we have flx-ido for that purpose.
#+BEGIN_SRC emacs-lisp
  (use-package ido
    :config
    (ido-mode +1)
    (setq ido-everywhere t
          ido-enable-flex-matching t))

  (use-package ido-vertical-mode
    :config
    (ido-vertical-mode +1)
    (setq ido-vertical-define-keys 'C-n-C-p-up-and-down))

  (use-package ido-completing-read+ :config (ido-ubiquitous-mode +1))

  (use-package flx-ido :config (flx-ido-mode +1))
#+END_SRC
** Programming language support and utilities
*** Company for auto-completion
Use ~C-n~ and ~C-p~ to navigate the tooltip.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish company-mode
    :hook
    (ess-mode . company-mode)
    (ess-r-mode . company-mode)
    (prog-mode . company-mode)
    ;; (after-init . global-company-mode)
    :config
    (setq company-minimum-prefix-length 1
          company-idle-delay 0.1
          company-selection-wrap-around t
          company-tooltip-align-annotations t
          company-frontends '(company-pseudo-tooltip-frontend ; show tooltip even for single candidate
                              company-echo-metadata-frontend))
    (with-eval-after-load 'company
      (define-key company-active-map (kbd "C-n") 'company-select-next)
      (define-key company-active-map (kbd "C-p") 'company-select-previous))
    :bind
    ("<f12>" . company-mode)
    )

#+END_SRC
*** Flycheck
A modern on-the-fly syntax checking extension -- absolute essential
#+BEGIN_SRC emacs-lisp
  (use-package flycheck :config (global-flycheck-mode +1))
#+END_SRC
*** Org Mode
Some minimal org mode tweaks: org-bullets gives our headings (h1, h2, h3...) a more visually pleasing look.
#+BEGIN_SRC emacs-lisp
  (use-package org
    :init
    (setq org-support-shift-select t) ; could be okay or not
    (setq org-src-tab-acts-natively t)
    :hook ((org-mode . visual-line-mode)
           (org-mode . org-indent-mode))
    ;; :bind ("\C-cl" . org-store-link) ; not using, but taken from kjhealy's setup
    )
  (use-package org-bullets :hook (org-mode . org-bullets-mode))
#+END_SRC
*** Yasnippet & yasnippet-snippets
Use TAB to expand snippets. The code snippet below also avoids clashing with company-mode.
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :diminish yas-minor-mode
    :preface (defvar tmp/company-point nil)
    :config
    (yas-global-mode +1)
    (advice-add 'company-complete-common
                :before
                #'(lambda ()
                    (setq tmp/company-point (point))))
    (advice-add 'company-complete-common
                :after
                #'(lambda ()
                    (when (equal tmp/company-point (point))
                      (yas-expand)))))

  (use-package yasnippet-snippets)
#+END_SRC
*** Useful major modes
Markdown mode and JSON mode
#+BEGIN_SRC emacs-lisp
  ;; This has been loaded via the atanas.org file
  ;; (use-package markdown-mode :hook (markdown-mode . visual-line-mode))

  (use-package json-mode)
#+END_SRC
** Miscellaneous
*** Diminish minor modes
The diminish package is used to hide unimportant minor modes in the modeline. It provides the ~:diminish~ keyword we've been using in other use-package declarations.
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :demand t)
#+END_SRC
*** Which-key
Provides us with hints on available keystroke combinations.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
    (which-key-mode +1)
    (setq which-key-idle-delay 0.4
          which-key-idle-secondary-delay 0.4))
#+END_SRC
*** Configure PATH on macOS
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :config (when (memq window-system '(mac ns x))
              (exec-path-from-shell-initialize)))
#+END_SRC

* Atanas' tweaks
** Function for loading/compiling starter-kit-*

#+srcname: set load path
#+begin_src emacs-lisp
  ;; this has been included for simplicity, however may need something more complex
  (org-babel-load-file (expand-file-name "~/.emacs.d/lisp/atanas.org")) ; for my custom settings
  ;; for custom lisp files from github or similar
  (add-to-list 'load-path (expand-file-name "~/.emacs.d/src")) ; test to make sure this is working

  ;;; Commentary:
  ;; this is taken form the plain text starter kit
  ;;; Code:
  ;; (setq dotfiles-dir (file-name-directory (or (buffer-file-name) load-file-name)))
  ;; (setq dotfiles-dir (file-name-directory (or load-file-name (buffer-file-name))))
  ;; (add-to-list 'load-path
  ;; (expand-file-name "lisp" dotfiles-dir
  ;; (expand-file-name "org"
  ;; (expand-file-name "src" dotfiles-dir))))

#+end_src
